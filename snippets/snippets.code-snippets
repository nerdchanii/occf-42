{
	// Place your GLOBAL snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"othodox canonical form hpp": {
		"scope": "cpp",
		"prefix": "occfhpp",
		"body": [
			"#pragma once\n",
			"class ${TM_FILENAME_BASE} {",
			"\tprivate:\n",
			"\tpublic:",
			"\t\t${TM_FILENAME_BASE}();",
			"\t\t${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE} &$1);",
			"\t\t${TM_FILENAME_BASE} &operator=(const ${TM_FILENAME_BASE} &$1);",
			"\t\t~${TM_FILENAME_BASE}();",
			"",
			"};"
		],
	},
	"othodox canonical form cpp":{
		"scope": "cpp",
		"prefix": "occfcpp",
		"body": [
			"#include \"${TM_FILENAME_BASE}.hpp\"",
			"",
			"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}() {",
			"",
			"}\n",
			"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE} &$1) {",
			"",
			"}\n",
			"${TM_FILENAME_BASE}& ${TM_FILENAME_BASE}::operator=(const ${TM_FILENAME_BASE} &$1) {",
			"",
			"\treturn (*this);",
			"}\n",
			"${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}() {",
			"",
			"}\n"
		]
	},
	"42cppMakefile": {
		"scope": "cpp,makefile,Makefile",
		"prefix": "make42",
		"body": ["CC = c++",
		"CPP_FLAGS = -Wall -Wextra -Werror -std=c++98",
		"",
		"NAME = $1",
		"",
		"ALL: $(NAME)",
		"",
		"$(NAME): $(OBJS)",
			"\t@$(CC) $(CFLAGS) $(OBJS) -o $(NAME)",
		"%.cpp: %.o",
		"\t@$(CC) $(CFLAGS) -c $< -o $@"
	]
	}
}